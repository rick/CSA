#!/usr/bin/env ruby

require "tmpdir"
require "fileutils"

def generator_path
  File.expand_path(File.join(File.dirname(__FILE__), "..", "dimacs", "assign"))
end

def solver_path
  File.expand_path(File.join(File.dirname(__FILE__), "..", "csa", "prec_costs", "csa_s_qm"))
end

def generator_ready?
  File.exists? generator_path
end

def solver_ready?
  File.exists? solver_path
end

def template_high_cost(nodes)
  sources = nodes / 2
  degree = Math.log(nodes, 2).ceil
  maxcost = 100_000_000
  seed = rand(100000)

  "nodes #{nodes}\nsources #{sources}\ndegree #{degree}\nmaxcost #{maxcost}\nseed #{seed}\n"
end

def template_low_cost(nodes)
  sources = nodes / 2
  degree = Math.log(nodes, 2).ceil
  maxcost = 100
  seed = rand(100000)

  "nodes #{nodes}\nsources #{sources}\ndegree #{degree}\nmaxcost #{maxcost}\nseed #{seed}\n"
end

def template_fixed_cost(nodes)
  sources = nodes / 2
  degree = (nodes / 16.0).ceil
  maxcost = 100
  seed = rand(100000)

  "nodes #{nodes}\nsources #{sources}\ndegree #{degree}\nmaxcost #{maxcost}\nmultiple\nseed #{seed}\n"
end

def template_dense(nodes)
  sources = nodes / 2
  maxcost = 1_000_000
  seed = rand(100000)

  "nodes #{nodes}\nsources #{sources}\ncomplete\nmaxcost #{maxcost}\nseed #{seed}\n"
end

def data_template(which, nodes)
  template =
    case which
    when "high"
      template_high_cost(nodes)
    when "low"
      template_low_cost(nodes)
    when "fixed"
      template_fixed_cost(nodes)
    when "dense"
      template_dense(nodes)
    else
      raise "Unknown template type: #{which}"
  end
end

def create_data(dir, template)
  template_file = File.join(dir, "template.txt")
  data_file     = File.join(dir, "data.txt")

  File.open(template_file, "w") { |file| file.puts template }
  puts "\nGenerating data from template in file [#{template_file}]:\n\n#{template}"
  system "#{generator_path} < #{template_file} > #{data_file}"

  data_file
end

def run_solver(dir, data)
  command = "cd #{dir} && #{solver_path} < #{data}"
  puts "\nRunning CSA-Q solver on data file [#{data}]:\n\n#{command}\n\n"
  system command
  File.join(dir, "output.flow")
end

def solve(which, nodes, destination)
  Dir.mktmpdir do |dir|
    data_file = create_data(dir, data_template(which, nodes))
    flow = run_solver(dir, data_file)
    puts "Flow stored in output file: #{flow} moving to #{destination}..."
    FileUtils.move flow, destination
    puts "Done."
  end
end

usage = "usage: #{$0} [high|low|fixed|dense] <nodecount> <output file>"

which = ARGV.shift
raise "#{usage}" unless %w(high low fixed dense).include?(which)

nodes = ARGV.shift.to_i
raise "#{usage}" unless nodes > 0

destination = ARGV.shift
raise "#{usage}" unless destination and destination != ""

raise "Cannot find generator in #{generator_path}. Perhaps run script/setup?" unless generator_ready?
raise "Cannot find solver in #{solver_path}. Perhaps run script/setup?" unless solver_ready?

solve which, nodes, destination
