!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACTIVE_TYPE	csa_defs.h	/^#define	ACTIVE_TYPE	/;"	d
BADCOUNT	parse.c	/^#define BADCOUNT	/;"	d	file:
BADINPUT1	parse.c	/^#define BADINPUT1	/;"	d	file:
BADINPUT2	parse.c	/^#define BADINPUT2	/;"	d	file:
BADINPUT3	parse.c	/^#define BADINPUT3	/;"	d	file:
BADINPUT4	parse.c	/^#define BADINPUT4	/;"	d	file:
BADINPUT5	parse.c	/^#define BADINPUT5	/;"	d	file:
BASEFILES	Makefile	/^BASEFILES=main.c refine.c update_epsilon.c parse.c stack.c timer.c debug.c$/;"	m
CFLAGS	Makefile	/^CFLAGS=-O3 -DSAVE_RESULT$/;"	m
DEFAULT_PO_COST_THRESH	csa_defs.h	/^#define	DEFAULT_PO_COST_THRESH	/;"	d
DEFAULT_PO_WORK_THRESH	csa_defs.h	/^#define	DEFAULT_PO_WORK_THRESH	/;"	d
DEFAULT_SCALE_FACTOR	csa_defs.h	/^#define	DEFAULT_SCALE_FACTOR	/;"	d
DEFAULT_UPD_FAC	csa_defs.h	/^#define	DEFAULT_UPD_FAC	/;"	d
ERRBASE	parse.c	/^#define ERRBASE	/;"	d	file:
EXCESS_THRESH	csa_defs.h	/^#define	EXCESS_THRESH	/;"	d
FALSE	csa_defs.h	/^#define	FALSE	/;"	d
HEADERS	Makefile	/^HEADERS=csa_types.h csa_defs.h$/;"	m
MAGIC_MARKER	csa_defs.h	/^#define	MAGIC_MARKER	/;"	d
MAXLINE	csa_defs.h	/^#define	MAXLINE	/;"	d
NOMEM	parse.c	/^#define NOMEM	/;"	d	file:
NONCONTIG	parse.c	/^#define	NONCONTIG	/;"	d	file:
NUM_BEST	csa_types.h	/^#define	NUM_BEST	/;"	d
PREC_COSTS	csa_types.h	/^#define	PREC_COSTS$/;"	d
REFINE_WORK	csa_defs.h	/^#define	REFINE_WORK	/;"	d
STORE_REV_ARCS	csa_types.h	/^#define	STORE_REV_ARCS$/;"	d
TARGETS	Makefile	/^TARGETS=csa_s csa_s_qm csa_q csa_q_qm csa_s_pr csa_q_pr csa_s_pr_qm csa_s_pu csa_s_pu_qm csa_q_pu csa_s_pr_pu csa_q_pr_pu csa_s_tpo csa_s_tpo_qm csa_q_tpo csa_s_rtpo csa_q_rtpo csa_s_rtpo_qm csa_s_spo csa_s_spo_qm csa_q_spo csa_s_rspo csa_s_rspo_qm csa_q_rspo csa_s_tpo_pr csa_q_tpo_pr csa_s_rtpo_pr csa_q_rtpo_pr csa_s_spo_pr csa_q_spo_pr csa_s_rspo_pr csa_q_rspo_pr csa_s_tpo_pu csa_q_tpo_pu csa_s_rtpo_pu csa_q_rtpo_pu csa_s_spo_pu csa_q_spo_pu csa_s_tpo_pr_pu csa_q_tpo_pr_pu csa_s_rtpo_pr_pu csa_q_rtpo_pr_pu csa_s_spo_pr_pu csa_q_spo_pr_pu$/;"	m
TRUE	csa_defs.h	/^#define	TRUE	/;"	d
USE_SP_AUG	csa_defs.h	/^#define	USE_SP_AUG$/;"	d
USE_SP_AUG	csa_types.h	/^#define	USE_SP_AUG$/;"	d
WORK_TYPE	csa_defs.h	/^#define	WORK_TYPE	/;"	d
a_scan	sp_aug_backward.c	/^void	a_scan(w)$/;"	f
a_scan	sp_aug_forward.c	/^void	a_scan(w)$/;"	f
a_scans	main.c	/^		a_scans = 0,$/;"	v
active	main.c	/^ACTIVE_TYPE	active;		\/* list of active nodes *\/$/;"	v
aug_path	csa_types.h	/^				struct	lr_arc	*aug_path;$/;"	m	struct:lhs_node	typeref:struct:lhs_node::lr_arc
aug_path	csa_types.h	/^				struct	lr_arc	*aug_path;$/;"	m	struct:rhs_node	typeref:struct:rhs_node::lr_arc
augment	sp_aug_backward.c	/^void	augment(v)$/;"	f
augment	sp_aug_forward.c	/^void	augment(w)$/;"	f
back_arcs	csa_types.h	/^				struct	rl_arc	*back_arcs;$/;"	m	struct:rhs_node	typeref:struct:rhs_node::rl_arc
banish_thresh	main.c	/^double	banish_thresh;$/;"	v
banner	main.c	/^char	*banner =$/;"	v
best	csa_types.h	/^				struct	lr_arc	*best[NUM_BEST];$/;"	m	struct:lhs_node	typeref:struct:lhs_node::lr_arc
best_build	refine.c	/^void	best_build(v)$/;"	f
bottom	csa_types.h	/^				char	**bottom;$/;"	m	struct:stack_st
bucket	main.c	/^rhs_ptr		*bucket;	\/* buckets for use in price refinements *\/$/;"	v
c	csa_types.h	/^				double	c;$/;"	m	struct:lr_arc
c	csa_types.h	/^				double	c;$/;"	m	struct:rl_arc
check_e_o	debug.c	/^void	check_e_o(epsilon)$/;"	f
check_e_o_node	debug.c	/^int	check_e_o_node(v, epsilon)$/;"	f
check_po_arcs	check_po_arcs.c	/^int	check_po_arcs()$/;"	f
closest_dist	sp_aug_backward.c	/^unsigned	long	closest_dist;$/;"	v
closest_node	sp_aug_backward.c	/^lhs_ptr	closest_node;$/;"	v
compute_cost	main.c	/^double	compute_cost()$/;"	f
copy_lr_arc	csa_defs.h	/^#define	copy_lr_arc(/;"	d
copy_rl_arc	csa_defs.h	/^#define	copy_rl_arc(/;"	d
cost	parse.c	/^				long	cost;$/;"	m	struct:temp_arc	file:
create_active	csa_defs.h	/^#define	create_active(/;"	d
delete_list	csa_defs.h	/^#define	delete_list(/;"	d
delta_reqd	csa_types.h	/^				long	delta_reqd;$/;"	m	struct:lhs_node
deq	queue.c	/^char	*deq(q)$/;"	f
deq_list	list.c	/^rhs_ptr	deq_list(head)$/;"	f
describe_self	main.c	/^void	describe_self()$/;"	f
dfs_visit	p_refine.c	/^int	dfs_visit(w)$/;"	f
display_results	main.c	/^void	display_results(time)$/;"	f
double_push	refine.c	/^void	double_push(v)$/;"	f
double_pushes	main.c	/^unsigned	double_pushes = 0,$/;"	v
end	csa_types.h	/^				char		**end;$/;"	m	struct:queue_st
enq	csa_defs.h	/^#define	enq(/;"	d
epsilon	main.c	/^double		epsilon;	\/* scaling parameter *\/$/;"	v
err_messages	parse.c	/^char *err_messages[] =$/;"	v
exch_lr_arcs	csa_defs.h	/^#define	exch_lr_arcs(/;"	d
exch_rl_arcs	csa_defs.h	/^#define	exch_rl_arcs(/;"	d
few_arcs	csa_types.h	/^					unsigned	few_arcs : 1;$/;"	m	struct:lhs_node::__anon1
first	csa_types.h	/^				struct	lr_arc	*first;$/;"	m	struct:lhs_node	typeref:struct:lhs_node::lr_arc
fix_ins	main.c	/^unsigned	fix_ins = 0;$/;"	v
get_active_node	csa_defs.h	/^#define	get_active_node(/;"	d
handle_rev_pointers	csa_defs.h	/^#define	handle_rev_pointers(/;"	d
head	csa_types.h	/^				char		**head;$/;"	m	struct:queue_st
head	csa_types.h	/^				rhs_ptr	head;$/;"	m	struct:lr_arc
head	parse.c	/^				rhs_ptr	head;$/;"	m	struct:temp_arc	file:
head_lhs_node	main.c	/^lhs_ptr	head_lhs_node, tail_lhs_node;$/;"	v
head_lr_arc	main.c	/^lr_aptr	head_lr_arc, tail_lr_arc;$/;"	v
head_rhs_node	main.c	/^rhs_ptr	head_rhs_node, tail_rhs_node;$/;"	v
head_rl_arc	main.c	/^rl_aptr	head_rl_arc, tail_rl_arc;$/;"	v
init	main.c	/^void	init(argc, argv)$/;"	f
insert_list	csa_defs.h	/^#define	insert_list(/;"	d
key	csa_types.h	/^				long	key;$/;"	m	struct:rhs_node
level	sp_aug_backward.c	/^unsigned	long	level;	\/* level currently being scanned *\/$/;"	v
lhs_node	csa_types.h	/^typedef	struct	lhs_node	{$/;"	s
lhs_ptr	csa_types.h	/^				}	*lhs_ptr;$/;"	t	typeref:struct:lhs_node
lr_aptr	csa_types.h	/^				}	*lr_aptr;$/;"	t	typeref:struct:lr_arc
lr_arc	csa_types.h	/^typedef	struct	lr_arc		{$/;"	s
m	main.c	/^unsigned	n, m;$/;"	v
main	main.c	/^int	main(argc, argv)$/;"	f
make_active	csa_defs.h	/^#define	make_active(/;"	d
matched	csa_types.h	/^				lhs_ptr	matched;$/;"	m	struct:rhs_node
matched	csa_types.h	/^				struct	lr_arc	*matched;$/;"	m	struct:lhs_node	typeref:struct:lhs_node::lr_arc
max_size	csa_types.h	/^				unsigned	max_size;$/;"	m	struct:queue_st
min_epsilon	main.c	/^double		min_epsilon;	\/* snap to this value when epsilon small *\/$/;"	v
myclock	timer.c	/^unsigned	myclock()$/;"	f
n	main.c	/^unsigned	n, m;$/;"	v
next	csa_types.h	/^				struct	rhs_node	*prev, *next;$/;"	m	struct:rhs_node	typeref:struct:rhs_node::
next_best	csa_types.h	/^				double	next_best;$/;"	m	struct:lhs_node
node_info	csa_types.h	/^					}	node_info;$/;"	m	struct:lhs_node	typeref:struct:lhs_node::__anon1
node_info	csa_types.h	/^					}	node_info;$/;"	m	struct:rhs_node	typeref:struct:rhs_node::__anon2
nomem_msg	stack.c	/^char	*nomem_msg = "Insufficient memory.\\n";$/;"	v
non_scans	main.c	/^		non_scans = 0;$/;"	v
num_buckets	main.c	/^long		num_buckets;	\/* number of buckets *\/$/;"	v
p	csa_types.h	/^				double	p;$/;"	m	struct:lhs_node
p	csa_types.h	/^				double	p;$/;"	m	struct:rhs_node
p_refine	p_refine.c	/^int	p_refine()$/;"	f
p_refine_time	main.c	/^		p_refine_time = 0;$/;"	v
p_refines	main.c	/^unsigned	p_refines = 0,$/;"	v
p_update	p_update.c	/^void	p_update()$/;"	f
p_update_time	main.c	/^		p_update_time = 0;$/;"	v
p_updates	main.c	/^unsigned	p_updates = 0,$/;"	v
parse	parse.c	/^unsigned long	parse()$/;"	f
parse_cmdline	main.c	/^void	parse_cmdline(argc, argv)$/;"	f
parse_error	parse.c	/^parse_error(err_index)$/;"	f
po_cost_thresh	main.c	/^double		po_cost_thresh;$/;"	v
po_work_thresh	main.c	/^WORK_TYPE	po_work_thresh;	\/* work threshhold for price-in checks *\/$/;"	v
prev	csa_types.h	/^				struct	rhs_node	*prev, *next;$/;"	m	struct:rhs_node	typeref:struct:rhs_node::rhs_node
price_in_mch_arc	csa_defs.h	/^#define	price_in_mch_arc(/;"	d
price_in_rev	csa_defs.h	/^#define	price_in_rev(/;"	d
price_in_unm_arc	csa_defs.h	/^#define	price_in_unm_arc(/;"	d
price_out_mch_arc	csa_defs.h	/^#define	price_out_mch_arc(/;"	d
price_out_rev	csa_defs.h	/^#define	price_out_rev(/;"	d
price_out_unm_arc	csa_defs.h	/^#define	price_out_unm_arc(/;"	d
priced_in	csa_types.h	/^					unsigned	priced_in : 1;$/;"	m	struct:rhs_node::__anon2
priced_out	csa_types.h	/^				struct	lr_arc	*priced_out;$/;"	m	struct:lhs_node	typeref:struct:lhs_node::lr_arc
priced_out	csa_types.h	/^				struct	rl_arc	*priced_out;$/;"	m	struct:rhs_node	typeref:struct:rhs_node::rl_arc
pushes	main.c	/^		pushes = 0,$/;"	v
q_create	queue.c	/^queue	q_create(size)$/;"	f
q_empty	csa_defs.h	/^#define q_empty(/;"	d
queue	csa_types.h	/^				}	*queue;$/;"	t	typeref:struct:queue_st
queue_st	csa_types.h	/^typedef	struct	queue_st	{$/;"	s
r_scan	p_refine.c	/^void	r_scan(w)$/;"	f
r_scans	main.c	/^		r_scans = 0,$/;"	v
reached_nodes	main.c	/^stack		reached_nodes;	\/* nodes reached in topological ordering *\/$/;"	v
rebuilds	main.c	/^unsigned	rebuilds = 0,$/;"	v
refine	refine.c	/^void	refine()$/;"	f
refine_time	main.c	/^		refine_time = 0;$/;"	v
refines	main.c	/^		refines = 0,$/;"	v
relabelings	main.c	/^		relabelings = 0,$/;"	v
rev	csa_types.h	/^				struct	lr_arc	*rev;$/;"	m	struct:rl_arc	typeref:struct:rl_arc::lr_arc
rev	csa_types.h	/^				struct	rl_arc	*rev;$/;"	m	struct:lr_arc	typeref:struct:lr_arc::rl_arc
rhs_node	csa_types.h	/^typedef	struct	rhs_node	{$/;"	s
rhs_ptr	csa_types.h	/^				}	*rhs_ptr;$/;"	t	typeref:struct:rhs_node
rl_aptr	csa_types.h	/^				}	*rl_aptr;$/;"	t	typeref:struct:rl_arc
rl_arc	csa_types.h	/^typedef	struct	rl_arc		{$/;"	s
scale_factor	main.c	/^double		scale_factor;	\/* scaling factor *\/$/;"	v
scanned	sp_aug_backward.c	/^rhs_ptr	scanned;$/;"	v
scans	main.c	/^		scans = 0,$/;"	v
show_lhs	debug.c	/^void	show_lhs()$/;"	f
show_lhs_node	debug.c	/^void	show_lhs_node(lhs_id)$/;"	f
show_rhs	debug.c	/^void	show_rhs()$/;"	f
show_rhs_node	debug.c	/^void	show_rhs_node(rhs_id)$/;"	f
show_usage	main.c	/^void	show_usage(name)$/;"	f
sort_insert	refine.c	/^#define	sort_insert(/;"	d	file:
sp_aug	sp_aug_backward.c	/^void	sp_aug()$/;"	f
sp_aug	sp_aug_forward.c	/^void	sp_aug()$/;"	f
sp_aug_time	main.c	/^		sp_aug_time = 0;$/;"	v
sp_augs	main.c	/^unsigned	sp_augs = 0,$/;"	v
srched	csa_types.h	/^					unsigned	srched : 1;$/;"	m	struct:rhs_node::__anon2
srchng	csa_types.h	/^					unsigned	srchng : 1;$/;"	m	struct:rhs_node::__anon2
st_create	stack.c	/^stack	st_create(size)$/;"	f
st_empty	csa_defs.h	/^#define	st_empty(/;"	d
st_pop	stack.c	/^char	*st_pop(s)$/;"	f
st_push	csa_defs.h	/^#define	st_push(/;"	d
st_reset	stack.c	/^void	st_reset(s)$/;"	f
stack	csa_types.h	/^				}	*stack;$/;"	t	typeref:struct:stack_st
stack_st	csa_types.h	/^typedef	struct	stack_st	{$/;"	s
storage	csa_types.h	/^				char		**storage;$/;"	m	struct:queue_st
ta_ptr	parse.c	/^				}	*ta_ptr;$/;"	t	typeref:struct:temp_arc	file:
tail	csa_types.h	/^				char		**tail;$/;"	m	struct:queue_st
tail	csa_types.h	/^				lhs_ptr	tail;$/;"	m	struct:lr_arc
tail	csa_types.h	/^				lhs_ptr	tail;$/;"	m	struct:rl_arc
tail	parse.c	/^				lhs_ptr	tail;$/;"	m	struct:temp_arc	file:
tail_lhs_node	main.c	/^lhs_ptr	head_lhs_node, tail_lhs_node;$/;"	v
tail_lr_arc	main.c	/^lr_aptr	head_lr_arc, tail_lr_arc;$/;"	v
tail_rhs_node	main.c	/^rhs_ptr	head_rhs_node, tail_rhs_node;$/;"	v
tail_rl_arc	main.c	/^rl_aptr	head_rl_arc, tail_rl_arc;$/;"	v
temp_arc	parse.c	/^typedef	struct	temp_arc	{$/;"	s	file:
top	csa_types.h	/^				char	**top;$/;"	m	struct:stack_st
top_sort	p_refine.c	/^int	top_sort()$/;"	f
total_e	main.c	/^unsigned	total_e;	\/* total excess *\/$/;"	v
u_scan	p_update.c	/^unsigned	u_scan(w)$/;"	f
u_scans	main.c	/^		u_scans = 0,$/;"	v
upd_work_thresh	main.c	/^WORK_TYPE	upd_work_thresh;\/* work threshhold for global update *\/$/;"	v
update_epsilon	update_epsilon.c	/^int	update_epsilon()$/;"	f
